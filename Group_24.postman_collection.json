{
	"info": {
		"_postman_id": "b82d6565-a337-4b65-9655-d6a2bbbb937a",
		"name": "Group_24",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "HW_1",
			"item": [
				{
					"name": "first",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.sendRequest(\"https://postman-echo.com/get\", function (err, response) {\r",
									"    console.log(response.json());\r",
									"});\r",
									"\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Body matches string\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"This is the first responce from server!\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "formdata",
							"formdata": []
						},
						"url": {
							"raw": "http://162.55.220.72:5005/first",
							"protocol": "http",
							"host": [
								"162",
								"55",
								"220",
								"72"
							],
							"port": "5005",
							"path": [
								"first"
							]
						}
					},
					"response": []
				},
				{
					"name": "get_method",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://162.55.220.72:5005/get_method?name=serj&age=25",
							"protocol": "http",
							"host": [
								"162",
								"55",
								"220",
								"72"
							],
							"port": "5005",
							"path": [
								"get_method"
							],
							"query": [
								{
									"key": "name",
									"value": "serj"
								},
								{
									"key": "age",
									"value": "25"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "user_info_3",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// 2. Статус код 200\r",
									"\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"\r",
									"// 3. Спарсить response body в json.\r",
									"    var jsonData = pm.response.json();\r",
									"\r",
									"\r",
									"// 4. Проверить, что name в ответе равно name s request (name вбить руками.)\r",
									"pm.test (\"name check\", function()\r",
									"     {pm.expect(jsonData.name).to.eql(\"serj\");\r",
									"     } );\r",
									"\r",
									"// 5. Проверить, что age в ответе равно age s request (age вбить руками.)\r",
									"pm.test(\"age check\", function () {\r",
									"    pm.expect(jsonData.age).to.eql(\"25\");\r",
									"});\r",
									"\r",
									"\r",
									"// 6. Проверить, что salary в ответе равно salary s request (salary вбить руками.)\r",
									"let salary = +jsonData.salary\r",
									"pm.test(\"salary check\", function () {\r",
									"    pm.expect(salary).to.eql(300);\r",
									"});\r",
									"\r",
									"// 7. Спарсить request.\r",
									"var req = request.data;\r",
									"console.log(req);\r",
									"// 8. Проверить, что name в ответе равно name s request (name забрать из request.)\r",
									"pm.test(\"check name frome request\", function () {\r",
									"    pm.expect(jsonData.name).to.eql(request.data.name);\r",
									"});\r",
									"\r",
									"// 9. Проверить, что age в ответе равно age s request (age забрать из request.)9. Проверить, что age в ответе равно age s request (age забрать из request.)\r",
									"pm.test(\"check age from request\", function () {\r",
									"    pm.expect(jsonData.age).to.eql(request.data.age);\r",
									"});\r",
									"\r",
									"// 10. Проверить, что salary в ответе равно salary s request (salary забрать из request.)\r",
									"pm.test(\"check salary from request\", function () {\r",
									"    let requestSalary = +request.data.salary\r",
									"    pm.expect(salary).to.eql(requestSalary);\r",
									"});\r",
									"\r",
									"// 11. Вывести в консоль параметр family из response.\r",
									"\r",
									"    console.log(jsonData.family);\r",
									"\r",
									"// 12. Проверить что u_salary_1_5_year в ответе равно salary*4 (salary забрать из request)\r",
									"pm.test(\"check salary*4\", function () {\r",
									"    let requestSalary = +request.data.salary\r",
									"    pm.expect(jsonData.family.u_salary_1_5_year).to.eql(requestSalary*4);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "name",
									"value": "serj",
									"type": "text"
								},
								{
									"key": "age",
									"value": "25",
									"type": "text"
								},
								{
									"key": "salary",
									"value": "300",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "http://162.55.220.72:5005/user_info_3",
							"protocol": "http",
							"host": [
								"162",
								"55",
								"220",
								"72"
							],
							"port": "5005",
							"path": [
								"user_info_3"
							],
							"query": [
								{
									"key": "name",
									"value": "serj",
									"disabled": true
								},
								{
									"key": "age",
									"value": "25",
									"disabled": true
								},
								{
									"key": "salary",
									"value": "300",
									"disabled": true
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "object_info_1",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://162.55.220.72:5005/object_info_1?name=serj&age=25&weight=88",
							"protocol": "http",
							"host": [
								"162",
								"55",
								"220",
								"72"
							],
							"port": "5005",
							"path": [
								"object_info_1"
							],
							"query": [
								{
									"key": "name",
									"value": "serj"
								},
								{
									"key": "age",
									"value": "25"
								},
								{
									"key": "weight",
									"value": "88"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "object_info_2",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://162.55.220.72:5005/object_info_2?name=serj&age=25&salary=300",
							"protocol": "http",
							"host": [
								"162",
								"55",
								"220",
								"72"
							],
							"port": "5005",
							"path": [
								"object_info_2"
							],
							"query": [
								{
									"key": "name",
									"value": "serj"
								},
								{
									"key": "age",
									"value": "25"
								},
								{
									"key": "salary",
									"value": "300"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "object_info_3",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// 2. Статус код 200\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"// 3. Спарсить response body в json.\r",
									"\r",
									" var jsonData = pm.response.json();\r",
									"\r",
									"//  4. Спарсить request.\r",
									"var reqBody = pm.request.url.query.toObject();\r",
									"console.log(reqBody)\r",
									"\r",
									"// 5. Проверить, что name в ответе равно name s request (name забрать из request.)\r",
									"pm.test(\"check name from request\", function () {\r",
									"    pm.expect(jsonData.name).to.eql(reqBody.name)\r",
									"});\r",
									"\r",
									"// 6. Проверить, что age в ответе равно age s request (age забрать из request.)\r",
									"\r",
									"pm.test(\"check age from request\", function () {\r",
									"    pm.expect(jsonData.age).to.eql(reqBody.age)\r",
									"});\r",
									"\r",
									"// 7. Проверить, что salary в ответе равно salary s request (salary забрать из request.)\r",
									"pm.test(\"check salary from request\", function () {\r",
									"    let salaryResponse = +jsonData.salary;\r",
									"    let reqBodySalary = +reqBody.salary\r",
									"    pm.expect(salaryResponse).to.eql(reqBodySalary)\r",
									"});\r",
									"\r",
									"// 8. Вывести в консоль параметр family из response.\r",
									"console.log(jsonData.family);\r",
									"\r",
									"// 9. Проверить, что у параметра dog есть параметры name.\r",
									"pm.test(\"check dog_name exists\", function () {\r",
									"    pm.expect(jsonData.family.pets.dog).to.have.property(\"name\")\r",
									"});\r",
									"\r",
									"// 10. Проверить, что у параметра dog есть параметры age.\r",
									"pm.test(\"check dog_age exists\", function () {\r",
									"    pm.expect(jsonData.family.pets.dog).to.have.property(\"age\")\r",
									"});\r",
									"\r",
									"// 11. Проверить, что параметр name имеет значение Luky.\r",
									"pm.test(\"check name is Luky\", function () {\r",
									"    pm.expect(jsonData.family.pets.dog.name).to.eql(\"Luky\")\r",
									"});\r",
									"\r",
									"// 12. Проверить, что параметр age имеет значение 4.\r",
									"pm.test(\"check age is 4\", function () {\r",
									"    let dogAge = +jsonData.family.pets.dog.age;\r",
									"    pm.expect(dogAge).to.eql(4)\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://162.55.220.72:5005/object_info_3?name=serj&age=25&salary=300",
							"protocol": "http",
							"host": [
								"162",
								"55",
								"220",
								"72"
							],
							"port": "5005",
							"path": [
								"object_info_3"
							],
							"query": [
								{
									"key": "name",
									"value": "serj"
								},
								{
									"key": "age",
									"value": "25"
								},
								{
									"key": "salary",
									"value": "300"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "object_info_4",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// 2. Статус код 200\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"// 3. Спарсить response body в json.\r",
									"\r",
									"let jsonData = pm.response.json()\r",
									"\r",
									"// 4. Спарсить request.\r",
									"\r",
									"var reqBody = pm.request.url.query.toObject();\r",
									"console.log(reqBody)\r",
									"\r",
									"// 5. Проверить, что name в ответе равно name s request (name забрать из request.)\r",
									"\r",
									"pm.test(\"check name from request\", function () {\r",
									"    pm.expect(jsonData.name).to.eql(reqBody.name);\r",
									"});\r",
									"\r",
									"\r",
									"// 6. Проверить, что age в ответе равно age из request (age забрать из request.)\r",
									"\r",
									"pm.test(\"check age from request\", function () {\r",
									"    let reqAge = +reqBody.age\r",
									"    pm.expect(jsonData.age).to.eql(reqAge);\r",
									"\r",
									"});\r",
									"\r",
									"\r",
									"// 7. Вывести в консоль параметр salary из request.\r",
									"\r",
									"console.log(reqBody.salary);\r",
									"\r",
									"// 8. Вывести в консоль параметр salary из response.\r",
									"\r",
									"console.log(jsonData.salary);\r",
									"\r",
									"// 9. Вывести в консоль 0-й элемент параметра salary из response.\r",
									"console.log(jsonData.salary[0]);\r",
									"\r",
									"// 10. Вывести в консоль 1-й элемент параметра salary параметр salary из response.\r",
									"console.log(jsonData.salary[1]);\r",
									"\r",
									"// 11. Вывести в консоль 2-й элемент параметра salary параметр salary из response.\r",
									"console.log(jsonData.salary[2]);\r",
									"\r",
									"// 12. Проверить, что 0-й элемент параметра salary равен salary из request (salary забрать из request.)\r",
									"let reqSalary = +reqBody.salary;\r",
									"pm.test(\"check salary[0]\", function () {\r",
									"    pm.expect(jsonData.salary[0]).to.eql(reqSalary);\r",
									"});\r",
									"\r",
									"// 13. Проверить, что 1-й элемент параметра salary равен salary*2 из request (salary забрать из request.)\r",
									"let respSalary1 = +jsonData.salary[1];\r",
									"pm.test(\"check salary[1]\", function () {\r",
									"    pm.expect(respSalary1).to.eql(reqSalary*2);\r",
									"});\r",
									"\r",
									"// 14. Проверить, что 2-й элемент параметра salary равен salary*3 из request (salary забрать из request.)\r",
									"let respSalary2 = +jsonData.salary[2];\r",
									"pm.test(\"check salary[2]\", function () {\r",
									"    pm.expect(respSalary2).to.eql(reqSalary*3);\r",
									"});\r",
									"\r",
									"// 15. Создать в окружении переменную name\r",
									"// 18. Передать в окружение переменную name\r",
									"let get_name = reqBody.name\r",
									"pm.environment.set(\"name\", get_name);\r",
									"\r",
									"// 16. Создать в окружении переменную age\r",
									"// 19. Передать в окружение переменную age\r",
									"\r",
									"let get_age = reqBody.age\r",
									"pm.environment.set(\"age\", get_age);\r",
									"\r",
									"\r",
									"// 17. Создать в окружении переменную salary\r",
									"// 20. Передать в окружение переменную salary\r",
									"\r",
									"let get_salary = reqBody.salary;\r",
									"pm.environment.set(\"salary\", get_salary);\r",
									"\r",
									"// 21. Написать цикл который выведет в консоль по порядку элементы списка из параметра salary.\r",
									"\r",
									"for(let i = 0; i <= 2; i++) {\r",
									"    let salary = jsonData.salary[i];\r",
									"console.log(salary)\r",
									"};"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "formdata",
							"formdata": []
						},
						"url": {
							"raw": "http://162.55.220.72:5005/object_info_4?name=serj&age=25&salary=300",
							"protocol": "http",
							"host": [
								"162",
								"55",
								"220",
								"72"
							],
							"port": "5005",
							"path": [
								"object_info_4"
							],
							"query": [
								{
									"key": "name",
									"value": "serj"
								},
								{
									"key": "age",
									"value": "25"
								},
								{
									"key": "salary",
									"value": "300"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "user_info_2",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"\r",
									"// 5. Статус код 200\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"\r",
									"// 6. Спарсить response body в json.\r",
									"var jsonData = pm.response.json(); \r",
									"\r",
									"\r",
									"  // 7. Спарсить request.\r",
									"var req = request.data;\r",
									"console.log(req);\r",
									"\r",
									"\r",
									"// 8. Проверить, что json response имеет параметр start_qa_salary\r",
									"\r",
									"pm.test (\"resp has start_qa_salary\", function(){\r",
									"    pm.expect(jsonData).to.have.property('start_qa_salary')\r",
									"});\r",
									"\r",
									"// 9. Проверить, что json response имеет параметр qa_salary_after_6_months\r",
									"\r",
									"pm.test (\"resp has qa_salary_after_6_months\", function(){\r",
									"    pm.expect(jsonData).to.have.property('qa_salary_after_6_months')\r",
									"});\r",
									"\r",
									"// 10. Проверить, что json response имеет параметр qa_salary_after_12_months\r",
									"pm.test (\"resp has qa_salary_after_12_months\", function(){\r",
									"    pm.expect(jsonData).to.have.property('qa_salary_after_12_months')\r",
									"});\r",
									"\r",
									"// 11. Проверить, что json response имеет параметр qa_salary_after_1.5_year\r",
									"pm.test (\"resp has qa_salary_after_1.5_year\", function(){\r",
									"    pm.expect(jsonData).to.have.property('qa_salary_after_1.5_year')\r",
									"});\r",
									"\r",
									"\r",
									"// 12. Проверить, что json response имеет параметр qa_salary_after_3.5_years\r",
									"pm.test (\"resp has qa_salary_after_3.5_years\", function(){\r",
									"    pm.expect(jsonData).to.have.property('qa_salary_after_3.5_years')\r",
									"});\r",
									"\r",
									"// 13. Проверить, что json response имеет параметр person\r",
									"\r",
									"pm.test (\"resp has person\", function(){\r",
									"    pm.expect(jsonData).to.have.property('person')\r",
									"});\r",
									"\r",
									"// 14. Проверить, что параметр start_qa_salary равен salary из request (salary забрать из request.)\r",
									"let reqSalary = +req.salary;\r",
									"pm.test(\"start_qa_salary === reqSalary\", function(){\r",
									"    pm.expect(jsonData.start_qa_salary).to.eql(reqSalary)\r",
									"});\r",
									"\r",
									"// 15. Проверить, что параметр qa_salary_after_6_months равен salary*2 из request (salary забрать из request.)\r",
									"pm.test(\"qa_salary_after_6_months === reqSalary *2\", function(){\r",
									"    pm.expect(jsonData.qa_salary_after_6_months).to.eql(reqSalary*2)\r",
									"});\r",
									"\r",
									"// 16. Проверить, что параметр qa_salary_after_12_months равен salary*2.7 из request (salary забрать из request.)\r",
									"pm.test(\"qa_salary_after_12_months === reqSalary *2.7\", function(){\r",
									"    pm.expect(jsonData.qa_salary_after_12_months).to.eql(reqSalary*2.7)\r",
									"});\r",
									"\r",
									"// 17. Проверить, что параметр qa_salary_after_1.5_year равен salary*3.3 из request (salary забрать из request.)\r",
									"pm.test(\"qa_salary_after_1.5_year === reqSalary *3.3\", function(){\r",
									"    pm.expect(jsonData[\"qa_salary_after_1.5_year\"]).to.eql(reqSalary*3.3)\r",
									"});\r",
									"\r",
									"// 18. Проверить, что параметр qa_salary_after_3.5_years равен salary*3.8 из request (salary забрать из request.)\r",
									"pm.test(\"qa_salary_after_3.5_year === reqSalary *3.8\", function(){\r",
									"    pm.expect(jsonData[\"qa_salary_after_3.5_years\"]).to.eql(reqSalary*3.8)\r",
									"});\r",
									"\r",
									"// 19. Проверить, что в параметре person, 1-й элемент из u_name равен salary из request (salary забрать из request.)\r",
									"\r",
									"pm.test(\"person.yourname[1] === reqSalary\", function(){\r",
									"    pm.expect(jsonData.person.u_name[1]).to.eql(reqSalary)\r",
									"});\r",
									"\r",
									"// 20. Проверить, что что параметр u_age равен age из request (age забрать из request.)\r",
									"pm.test(\"u_age === reqAge\", function(){\r",
									"    let reqAge = +req.age;\r",
									"    pm.expect(jsonData.person.u_age).to.eql(reqAge)\r",
									"});\r",
									"\r",
									"// 21. Проверить, что параметр u_salary_5_years равен salary*4.2 из request (salary забрать из request.)\r",
									"pm.test(\"u_salary_after_5_years === reqSalary *4.2\", function(){\r",
									"    pm.expect(jsonData.person.u_salary_5_years).to.eql(reqSalary*4.2)\r",
									"});\r",
									"\r",
									"// 22. Написать цикл который выведет в консоль по порядку элементы списка из параметра person.\r",
									"\r",
									"var person = jsonData.person;\r",
									"\r",
									"for (var i = 0; i < 3; i++)\r",
									" { console.log(Object.keys(person)[i]); };\r",
									"\r",
									"\r",
									"//вывел именно список \"ключей\", не уверен , что правильно понял задание"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "name",
									"value": "{{name}}",
									"type": "text"
								},
								{
									"key": "age",
									"value": "{{age}}",
									"type": "text"
								},
								{
									"key": "salary",
									"value": "{{salary}}",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "http://162.55.220.72:5005/user_info_2",
							"protocol": "http",
							"host": [
								"162",
								"55",
								"220",
								"72"
							],
							"port": "5005",
							"path": [
								"user_info_2"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "HW_2",
			"item": [
				{
					"name": "Login",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();\r",
									"\r",
									"\r",
									"pm.environment.set(\"token\", jsonData.token);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "login",
									"value": "serj",
									"type": "text"
								},
								{
									"key": "password",
									"value": "123456",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "http://162.55.220.72:5005/login",
							"protocol": "http",
							"host": [
								"162",
								"55",
								"220",
								"72"
							],
							"port": "5005",
							"path": [
								"login"
							]
						}
					},
					"response": []
				},
				{
					"name": "user_info",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// 1) Статус код 200\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"// 2) Проверка структуры json в ответе.\r",
									"\r",
									"var schema = {\r",
									"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
									"  \"type\": \"object\",\r",
									"  \"properties\": {\r",
									"    \"person\": {\r",
									"      \"type\": \"object\",\r",
									"      \"properties\": {\r",
									"        \"u_age\": {\r",
									"          \"type\": \"integer\"\r",
									"        },\r",
									"        \"u_name\": {\r",
									"          \"type\": \"array\",\r",
									"          \"items\": [\r",
									"            {\r",
									"              \"type\": \"string\"\r",
									"            },\r",
									"            {\r",
									"              \"type\": \"integer\"\r",
									"            },\r",
									"            {\r",
									"              \"type\": \"integer\"\r",
									"            }\r",
									"          ]\r",
									"        },\r",
									"        \"u_salary_1_5_year\": {\r",
									"          \"type\": \"integer\"\r",
									"        }\r",
									"      },\r",
									"      \"required\": [\r",
									"        \"u_age\",\r",
									"        \"u_name\",\r",
									"        \"u_salary_1_5_year\"\r",
									"      ]\r",
									"    },\r",
									"    \"qa_salary_after_12_months\": {\r",
									"      \"type\": \"number\"\r",
									"    },\r",
									"    \"qa_salary_after_6_months\": {\r",
									"      \"type\": \"integer\"\r",
									"    },\r",
									"    \"start_qa_salary\": {\r",
									"      \"type\": \"integer\"\r",
									"    }\r",
									"  },\r",
									"  \"required\": [\r",
									"    \"person\",\r",
									"    \"qa_salary_after_12_months\",\r",
									"    \"qa_salary_after_6_months\",\r",
									"    \"start_qa_salary\"\r",
									"  ]\r",
									"};\r",
									"\r",
									"var data1 = pm.response.json();\r",
									"\r",
									"pm.test('Schema is valid', function () {\r",
									"    pm.expect(tv4.validate(data1, schema)).to.be.true;\r",
									"});\r",
									"\r",
									"// 3) В ответе указаны коэффициенты умножения salary, напишите тесты по проверке правильности результата перемножения на коэффициент.\r",
									"var jsonData = pm.response.json();\r",
									"var reqData = JSON.parse(request.data);\r",
									"console.log(reqData);\r",
									"//1 test\r",
									"pm.test(\"qa_salary_after_6_months'= salary * 2,\", function () {\r",
									"    pm.expect(jsonData.qa_salary_after_6_months).to.eql(reqData.salary*2);\r",
									"});\r",
									"\r",
									"//2 test\r",
									"pm.test(\"qa_salary_after_12_months': salary * 2.9\", function () {\r",
									"    pm.expect(jsonData.qa_salary_after_12_months).to.eql(reqData.salary*2.9);\r",
									"});\r",
									"\r",
									"//3 test\r",
									"pm.test(\"u_salary_1.5_year': salary * 4\", function () {\r",
									"    pm.expect(jsonData.person.u_salary_1_5_year).to.eql(reqData.salary*4);\r",
									"});\r",
									"\r",
									"\r",
									"// 4) Достать значение из поля 'u_salary_1.5_year' и передать в поле salary запроса http://162.55.220.72:5005/get_test_user\r",
									"let salary_1_5_year = jsonData.person.u_salary_1_5_year;\r",
									"console.log(\"1_5_year\" +\" \" + \"=\" + \" \" + salary_1_5_year);\r",
									"pm.environment.set(\"salary_1_5_year\", salary_1_5_year);\r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{ \"age\" : 25,\r\n\"salary\" : 300,\r\n\"name\": \"serj\",\r\n\"auth_token\" : \"{{token}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/user_info",
							"host": [
								"{{url}}"
							],
							"path": [
								"user_info"
							]
						}
					},
					"response": []
				},
				{
					"name": "get_test_user",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();\r",
									"\r",
									"// 1) Статус код 200\r",
									"\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"// 2) Проверка структуры json в ответе.\r",
									"\r",
									"var schema = {\r",
									"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
									"  \"type\": \"object\",\r",
									"  \"properties\": {\r",
									"    \"age\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"family\": {\r",
									"      \"type\": \"object\",\r",
									"      \"properties\": {\r",
									"        \"children\": {\r",
									"          \"type\": \"array\",\r",
									"          \"items\": [\r",
									"            {\r",
									"              \"type\": \"array\",\r",
									"              \"items\": [\r",
									"                {\r",
									"                  \"type\": \"string\"\r",
									"                },\r",
									"                {\r",
									"                  \"type\": \"integer\"\r",
									"                }\r",
									"              ]\r",
									"            },\r",
									"            {\r",
									"              \"type\": \"array\",\r",
									"              \"items\": [\r",
									"                {\r",
									"                  \"type\": \"string\"\r",
									"                },\r",
									"                {\r",
									"                  \"type\": \"integer\"\r",
									"                }\r",
									"              ]\r",
									"            }\r",
									"          ]\r",
									"        },\r",
									"        \"u_salary_1_5_year\": {\r",
									"          \"type\": \"integer\"\r",
									"        }\r",
									"      },\r",
									"      \"required\": [\r",
									"        \"children\",\r",
									"        \"u_salary_1_5_year\"\r",
									"      ]\r",
									"    },\r",
									"    \"name\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"salary\": {\r",
									"      \"type\": \"integer\"\r",
									"    }\r",
									"  },\r",
									"  \"required\": [\r",
									"    \"age\",\r",
									"    \"family\",\r",
									"    \"name\",\r",
									"    \"salary\"\r",
									"  ]\r",
									"};\r",
									"\r",
									"var data1 = pm.response.json();\r",
									"pm.test('Schema is valid', function () {\r",
									"    pm.expect(tv4.validate(data1, schema)).to.be.true;\r",
									"});\r",
									"\r",
									"// 3) Проверить что занчение поля name = значению переменной name из окружения\r",
									"\r",
									"pm.test(\"name = {{name}}\", function () {\r",
									"    pm.expect(jsonData.name).to.eql(pm.environment.get(\"name\"));\r",
									"});\r",
									"\r",
									"// 4) Проверить что занчение поля age в ответе соответсвует отправленному в запросе значению поля age\r",
									"\r",
									"let req = request.data;\r",
									"console.log(req);\r",
									"\r",
									"pm.test(\"age = reqAge\", function () {\r",
									"    pm.expect(jsonData.name).to.eql(req.name);\r",
									"});\r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "age",
									"value": "25",
									"type": "text"
								},
								{
									"key": "salary",
									"value": "{{salary_1_5_year}}",
									"type": "text"
								},
								{
									"key": "name",
									"value": "{{name}}",
									"type": "text"
								},
								{
									"key": "auth_token",
									"value": "{{token}}",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "http://162.55.220.72:5005/get_test_user",
							"protocol": "http",
							"host": [
								"162",
								"55",
								"220",
								"72"
							],
							"port": "5005",
							"path": [
								"get_test_user"
							]
						}
					},
					"response": []
				},
				{
					"name": "new_data",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// 1) Статус код 200\r",
									"\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"// 2) Проверка структуры json в ответе.\r",
									"\r",
									"var schema = {\r",
									"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
									"  \"type\": \"object\",\r",
									"  \"properties\": {\r",
									"    \"age\": {\r",
									"      \"type\": \"integer\"\r",
									"    },\r",
									"    \"name\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"salary\": {\r",
									"      \"type\": \"array\",\r",
									"      \"items\": [\r",
									"        {\r",
									"          \"type\": \"integer\"\r",
									"        },\r",
									"        {\r",
									"          \"type\": \"string\"\r",
									"        },\r",
									"        {\r",
									"          \"type\": \"string\"\r",
									"        }\r",
									"      ]\r",
									"    }\r",
									"  },\r",
									"  \"required\": [\r",
									"    \"age\",\r",
									"    \"name\",\r",
									"    \"salary\"\r",
									"  ]\r",
									"};\r",
									"\r",
									"var data1 = pm.response.json();\r",
									"\r",
									"pm.test('Schema is valid', function () {\r",
									"    pm.expect(tv4.validate(data1, schema)).to.be.true;\r",
									"});\r",
									"\r",
									"// 3) В ответе указаны коэффициенты умножения salary, напишите тесты по проверке правильности результата перемножения на коэффициент.\r",
									"var jsonData = pm.response.json();\r",
									"var req = request.data;\r",
									"console.log(req);\r",
									"\r",
									"var reqSalary = req.salary;\r",
									"\r",
									"pm.test(\"salary[0] === reqSalary *1\", function () {\r",
									"    pm.expect(jsonData.salary[0]).to.eql(+reqSalary);\r",
									"});\r",
									"\r",
									"pm.test(\"salary[1] === reqSalary *2\", function () {\r",
									"    pm.expect(+jsonData.salary[1]).to.eql(reqSalary*2);\r",
									"});\r",
									"\r",
									"pm.test(\"salary[2] === reqSalary *3\", function () {\r",
									"    pm.expect(+jsonData.salary[2]).to.eql(reqSalary*3);\r",
									"});\r",
									"\r",
									"\r",
									"// 4) проверить, что 2-й элемент массива salary больше 1-го и 0-го\r",
									"\r",
									"pm.test(\"salary[2] > [0], [1]\", function () {\r",
									"    pm.expect(jsonData.salary[2])<(jsonData.salary[0]);\r",
									"    pm.expect(jsonData.salary[2])<(jsonData.salary[1]);\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "age",
									"value": "25",
									"type": "text"
								},
								{
									"key": "salary",
									"value": "300",
									"type": "text"
								},
								{
									"key": "name",
									"value": "serj",
									"type": "text"
								},
								{
									"key": "auth_token",
									"value": "{{token}}",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "http://162.55.220.72:5005/new_data",
							"protocol": "http",
							"host": [
								"162",
								"55",
								"220",
								"72"
							],
							"port": "5005",
							"path": [
								"new_data"
							]
						}
					},
					"response": []
				},
				{
					"name": "test_pet_info",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// 1) Статус код 200\r",
									"\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"// 2) Проверка структуры json в ответе.\r",
									"let jsonData = pm.response.json();\r",
									"var schema = {\r",
									"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
									"  \"type\": \"object\",\r",
									"  \"properties\": {\r",
									"    \"age\": {\r",
									"      \"type\": \"integer\"\r",
									"    },\r",
									"    \"daily_food\": {\r",
									"      \"type\": \"number\"\r",
									"    },\r",
									"    \"daily_sleep\": {\r",
									"      \"type\": \"number\"\r",
									"    },\r",
									"    \"name\": {\r",
									"      \"type\": \"string\"\r",
									"    }\r",
									"  },\r",
									"  \"required\": [\r",
									"    \"age\",\r",
									"    \"daily_food\",\r",
									"    \"daily_sleep\",\r",
									"    \"name\"\r",
									"  ]\r",
									"};\r",
									"\r",
									"var data1 = jsonData;\r",
									"\r",
									"pm.test('Schema is valid', function () {\r",
									"    pm.expect(tv4.validate(data1, schema)).to.be.true;\r",
									"});\r",
									"\r",
									"\r",
									"// 3) В ответе указаны коэффициенты умножения weight, напишите тесты по проверке правильности результата перемножения на коэффициент.\r",
									"\r",
									"let reqWeight = request.data.weight;\r",
									"\r",
									"pm.test(\"daily_food':weight * 0.012\", function () {\r",
									"    pm.expect(jsonData.daily_food).to.eql(reqWeight*0.012);\r",
									"});\r",
									"\r",
									"pm.test(\"daily_sleep': weight * 2.5\", function () {\r",
									"    pm.expect(jsonData.daily_sleep).to.eql(reqWeight*2.5);\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "age",
									"value": "25",
									"type": "text"
								},
								{
									"key": "weight",
									"value": "85",
									"type": "text"
								},
								{
									"key": "name",
									"value": "serj",
									"type": "text"
								},
								{
									"key": "auth_token",
									"value": "{{token}}",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "http://162.55.220.72:5005/test_pet_info",
							"protocol": "http",
							"host": [
								"162",
								"55",
								"220",
								"72"
							],
							"port": "5005",
							"path": [
								"test_pet_info"
							]
						}
					},
					"response": []
				},
				{
					"name": "currency",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// 1) Можете взять любой объект из присланного списка, используйте js random.\r",
									"// В объекте возьмите Cur_ID и передать через окружение в следующий запрос.\r",
									"\r",
									"\r",
									"var jsonData = pm.response.json();\r",
									"\r",
									"function random_item(jsonData)\r",
									"{\r",
									"return jsonData[Math.floor(Math.random()*jsonData.length)];\r",
									"     \r",
									"};\r",
									"\r",
									"console.log(random_item(jsonData));\r",
									"\r",
									"var randomCur = random_item(jsonData);\r",
									"var randomCurID = randomCur.Cur_ID;\r",
									"\r",
									"console.log(randomCurID);\r",
									"\r",
									"pm.environment.set(\"curr_code\", randomCurID);\r",
									"\r",
									"\r",
									"// *****\r",
									"// 1) получить список валют\r",
									"\r",
									"function getFields(input, field) {\r",
									"    var output = [];\r",
									"    for (var i=0; i < input.length ; ++i)\r",
									"        output.push(input[i][field]);\r",
									"    return output;\r",
									"}\r",
									"\r",
									"var result = getFields(jsonData, \"Cur_Name\"); \r",
									"\r",
									"console.log(result);\r",
									"\r",
									"// остальные пункты надо позже дожать :)\r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "auth_token",
									"value": "{{token}}",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "http://162.55.220.72:5005/currency",
							"protocol": "http",
							"host": [
								"162",
								"55",
								"220",
								"72"
							],
							"port": "5005",
							"path": [
								"currency"
							]
						}
					},
					"response": []
				},
				{
					"name": "curr_byn",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// 1) Статус код 200\r",
									"\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"// 2) Проверка структуры json в ответе.\r",
									"\r",
									"    var jsonData = pm.response.json();\r",
									"\r",
									"var schema = {\r",
									"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
									"  \"type\": \"object\",\r",
									"  \"properties\": {\r",
									"    \"Cur_Abbreviation\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"Cur_ID\": {\r",
									"      \"type\": \"integer\"\r",
									"    },\r",
									"    \"Cur_Name\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"Cur_OfficialRate\": {\r",
									"      \"type\": \"number\"\r",
									"    },\r",
									"    \"Cur_Scale\": {\r",
									"      \"type\": \"integer\"\r",
									"    },\r",
									"    \"Date\": {\r",
									"      \"type\": \"string\"\r",
									"    }\r",
									"  },\r",
									"  \"required\": [\r",
									"    \"Cur_Abbreviation\",\r",
									"    \"Cur_ID\",\r",
									"    \"Cur_Name\",\r",
									"    \"Cur_OfficialRate\",\r",
									"    \"Cur_Scale\",\r",
									"    \"Date\"\r",
									"  ]\r",
									"};\r",
									"\r",
									"var data1 = jsonData;\r",
									"\r",
									"\r",
									"pm.test('Schema is valid', function () {\r",
									"    pm.expect(tv4.validate(data1, schema)).to.be.true;\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "auth_token",
									"value": "{{token}}",
									"type": "text"
								},
								{
									"key": "curr_code",
									"value": "{{curr_code}}",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "http://162.55.220.72:5005/curr_byn",
							"protocol": "http",
							"host": [
								"162",
								"55",
								"220",
								"72"
							],
							"port": "5005",
							"path": [
								"curr_byn"
							]
						}
					},
					"response": []
				}
			]
		}
	]
}